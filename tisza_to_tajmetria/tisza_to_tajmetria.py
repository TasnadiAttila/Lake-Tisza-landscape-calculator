# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TiszaToTajmetria
                                 A QGIS plugin
 Landscape-based analysis of the mosaicity of Lake Tisza
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tasnádi Attila
        email                : tasnadi.attila21@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .tisza_to_tajmetria_dialog import TiszaToTajmetriaDialog
# Import helpers
from .Controllers.ComboBoxHandler import ComboBoxHandler
from .Controllers.ExcelHelper import ExcelHelper
import os.path


class TiszaToTajmetria:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TiszaToTajmetria_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Tiszta To Tajmetria')
        self.first_start = None
        self.dlg = None

    def tr(self, message):
        """Get translation."""
        return QCoreApplication.translate('TiszaToTajmetria', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/tisza_to_tajmetria/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate mosaicity'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        """Remove the plugin menu item and icon."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Tiszta To Tajmetria'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        ExcelHelper.ensureXlsxwriterInstalled(self)

        """Run method that performs all the real work."""
        if self.first_start:
            self.first_start = False
            self.dlg = TiszaToTajmetriaDialog()
            self.dlg.calculateButton.clicked.connect(self.on_calculate_clicked)
            self.dlg.saveFileDialog.setFilter("Excel files (*.xlsx);")

        self.dlg.saveFileDialog.setFilePath("")
        ComboBoxHandler.loadLayersToCombobox(self.dlg.layerSelector, ['raster', 'vector'])
        ComboBoxHandler.loadMetricsToCombobox(self.dlg.metricSelector)

        ComboBoxHandler.addClearButtonToCombobox(self.dlg.layerSelector)
        ComboBoxHandler.addClearButtonToCombobox(self.dlg.metricSelector)

        self.dlg.show()
        self.dlg.exec_()


    def on_calculate_clicked(self):
        output_path = self.dlg.saveFileDialog.filePath()

        selected_index = self.dlg.layerSelector.currentIndex()
        selected_layer = self.dlg.layerSelector.itemData(selected_index)

        selected_metric_index = self.dlg.metricSelector.currentIndex()
        selected_metric = self.dlg.metricSelector.itemData(selected_metric_index)
        self.iface.messageBar().pushMessage(
            "Info",
            f"Effective Mesh Size: {selected_metric(selected_layer):.2f} km²",
            level=0, duration=10
        )

        # if not output_path:
        #     self.iface.messageBar().pushMessage(
        #         "Error",
        #         "No save file selected.!",
        #         level=Qgis.Warning,
        #         duration=3
        #     )
        #     return
        #
        #
        #
        # ExcelHelper.createOutputExcelFile(output_path)
        #
        # self.iface.messageBar().pushMessage(
        #     "Success",
        #     f"Excel is created successfully: {output_path}",
        #     level=Qgis.Success,
        #     duration=3
        # )

