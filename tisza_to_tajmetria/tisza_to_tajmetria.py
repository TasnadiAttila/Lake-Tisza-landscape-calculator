# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TiszaToTajmetria
                                 A QGIS plugin
 Landscape-based analysis of the mosaicity of Lake Tisza
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tasnádi Attila
        email                : tasnadi.attila21@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QgsColorRampShader
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import Qgis

# Initialize Qt resources from file resources.py
from .resources import *
import xlsxwriter
# Import the code for the dialog
from .tisza_to_tajmetria_dialog import TiszaToTajmetriaDialog
# Import helpers
from .Controllers.ComboBoxHandler import ComboBoxHandler
from .Controllers.ExcelHelper import ExcelHelper
import os.path


class TiszaToTajmetria:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TiszaToTajmetria_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Tiszta To Tajmetria')
        self.first_start = None
        self.dlg = None

    def tr(self, message):
        """Get translation."""
        return QCoreApplication.translate('TiszaToTajmetria', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/tisza_to_tajmetria/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate mosaicity'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        """Remove the plugin menu item and icon."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Tiszta To Tajmetria'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        ExcelHelper.ensureXlsxwriterInstalled(self)

        """Run method that performs all the real work."""
        if self.first_start:
            self.first_start = False
            self.dlg = TiszaToTajmetriaDialog()
            self.dlg.calculateButton.clicked.connect(self.onCalculateClicked)
            self.dlg.saveFileDialog.setFilter("Excel files (*.xlsx);")

        ComboBoxHandler.makeComboboxEditable(self.dlg.layerSelector)
        ComboBoxHandler.makeComboboxEditable(self.dlg.metricSelector)

        self.dlg.saveFileDialog.setFilePath("")
        ComboBoxHandler.loadLayersToCombobox(self.dlg.layerSelector, ['raster'])
        ComboBoxHandler.loadMetricsToCombobox(self.dlg.metricSelector)


        self.dlg.show()
        self.dlg.exec_()

    @staticmethod
    def get_land_cover_mapping_from_layer(layer):
        renderer = layer.renderer()
        mapping = {}

        print(f"Renderer type: {renderer.type()}")

        if renderer.type() == 'paletted':
            classes = renderer.classes()
            for cls in classes:
                mapping[float(cls.value)] = cls.label

        elif renderer.type() == 'singlebandpseudocolor':
            shader = renderer.shader()
            if shader:
                color_ramp_shader = shader.rasterShaderFunction()
                if isinstance(color_ramp_shader, QgsColorRampShader):
                    for item in color_ramp_shader.colorRampItemList():
                        mapping[float(item.value)] = item.label

        elif renderer.type() == 'singlebandgray':
            mapping["min"] = layer.dataProvider().bandStatistics(1).minimumValue
            mapping["max"] = layer.dataProvider().bandStatistics(1).maximumValue

        elif renderer.type() == 'multibandcolor':
            mapping["Red band"] = renderer.redBand()
            mapping["Green band"] = renderer.greenBand()
            mapping["Blue band"] = renderer.blueBand()

        elif renderer.type() == 'hillshade':
            mapping["Band"] = renderer.band()
            mapping["Z factor"] = renderer.zFactor()
            mapping["Azimuth"] = renderer.azimuth()
            mapping["Altitude"] = renderer.altitude()

        else:
            print("Unknown render type.")

        return mapping

    def onCalculateClicked(self):
        output_path = self.dlg.saveFileDialog.filePath()

        selected_layers = ComboBoxHandler.getCheckedItems(self.dlg.layerSelector)
        if not selected_layers:
            self.iface.messageBar().pushMessage(
                "Error",
                "No layer selected!",
                level=Qgis.Warning,
                duration=3
            )
            return

        selected_metrics = ComboBoxHandler.getCheckedItems(self.dlg.metricSelector)
        if not selected_metrics:
            self.iface.messageBar().pushMessage(
                "Error",
                "No metric selected!",
                level=Qgis.Warning,
                duration=3
            )
            return

        #TODO: Not every metric is in square km
        for layer in selected_layers:
            land_cover_mapping = self.get_land_cover_mapping_from_layer(layer)

            for metric_func, metric_name in selected_metrics:
                value = metric_func(layer)

                if isinstance(value, dict):
                    msg_parts = []
                    for cls, v in value.items():
                        class_name = land_cover_mapping.get(cls, f"Class {cls}")
                        msg_parts.append(f"{class_name}: {v:.2f} %")
                    msg = "; ".join(msg_parts)

                elif isinstance(value, (int, float)):
                    msg = f"{value:.2f} km²"

                else:
                    msg = str(value)

                self.iface.messageBar().pushMessage(
                    "Info",
                    f"{layer.name()} - {metric_name}: {msg}",
                    level=0,
                    duration=10
                )



        # # Create an new Excel file and add a worksheet.
        # workbook = xlsxwriter.Workbook(output_path)
        # worksheet = workbook.add_worksheet()
        #
        # # Widen the first column to make the text clearer.
        # worksheet.set_column("A:A", 20)
        #
        # # Add a bold format to use to highlight cells.
        # bold = workbook.add_format({"bold": True})
        #
        # # Write some simple text.
        # worksheet.write("A1", "Hello")
        #
        # # Text with formatting.
        # worksheet.write("A2", "World", bold)
        #
        # # Write some numbers, with row/column notation.
        # worksheet.write(2, 0, 123)
        # worksheet.write(3, 0, 123.456)
        #
        # workbook.close()