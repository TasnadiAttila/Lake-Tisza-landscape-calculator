# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TiszaToTajmetria
                                 A QGIS plugin
 Landscape-based analysis of the mosaicity of Lake Tisza
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tasnádi Attila
        email                : tasnadi.attila21@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import Qgis, QgsColorRampShader


# Initialize Qt resources from file resources.py
from .resources import *
import xlsxwriter
# Import the code for the dialog
from .tisza_to_tajmetria_dialog import TiszaToTajmetriaDialog
# Import helpers
from .Controllers.ComboBoxHandler import ComboBoxHandler
from .Controllers.ExcelHelper import ExcelHelper
import os.path


class TiszaToTajmetria:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TiszaToTajmetria_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Tiszta To Tajmetria')
        self.first_start = None
        self.dlg = None

    def tr(self, message):
        """Get translation."""
        return QCoreApplication.translate('TiszaToTajmetria', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/tisza_to_tajmetria/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate mosaicity'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        """Remove the plugin menu item and icon."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Tiszta To Tajmetria'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        ExcelHelper.ensureXlsxwriterInstalled(self)

        """Run method that performs all the real work."""
        if self.first_start:
            self.first_start = False
            self.dlg = TiszaToTajmetriaDialog()
            self.dlg.calculateButton.clicked.connect(self.onCalculateClicked)
            self.dlg.saveFileDialog.setFilter("Excel files (*.xlsx);")

        ComboBoxHandler.makeComboboxEditable(self.dlg.layerSelector)
        ComboBoxHandler.makeComboboxEditable(self.dlg.metricSelector)

        self.dlg.saveFileDialog.setFilePath("")
        ComboBoxHandler.loadLayersToCombobox(self.dlg.layerSelector, ['raster'])
        ComboBoxHandler.loadMetricsToCombobox(self.dlg.metricSelector)


        self.dlg.show()
        self.dlg.exec_()

    @staticmethod
    def get_land_cover_mapping_from_layer(layer):
        renderer = layer.renderer()
        mapping = {}

        print(f"Renderer type: {renderer.type()}")

        if renderer.type() == 'paletted':
            classes = renderer.classes()
            for cls in classes:
                mapping[float(cls.value)] = cls.label

        elif renderer.type() == 'singlebandpseudocolor':
            shader = renderer.shader()
            if shader:
                color_ramp_shader = shader.rasterShaderFunction()
                if isinstance(color_ramp_shader, QgsColorRampShader):
                    for item in color_ramp_shader.colorRampItemList():
                        mapping[float(item.value)] = item.label

        elif renderer.type() == 'singlebandgray':
            mapping["min"] = layer.dataProvider().bandStatistics(1).minimumValue
            mapping["max"] = layer.dataProvider().bandStatistics(1).maximumValue

        elif renderer.type() == 'multibandcolor':
            mapping["Red band"] = renderer.redBand()
            mapping["Green band"] = renderer.greenBand()
            mapping["Blue band"] = renderer.blueBand()

        elif renderer.type() == 'hillshade':
            mapping["Band"] = renderer.band()
            mapping["Z factor"] = renderer.zFactor()
            mapping["Azimuth"] = renderer.azimuth()
            mapping["Altitude"] = renderer.altitude()

        else:
            print("Unknown render type.")

        return mapping

    def onCalculateClicked(self):
        # Definíció: Metrika neve (ahogy a ComboBoxHandler visszaadja) -> Mértékegység
        UNIT_MAPPING = {
            "Effective Mesh Size": "km²",  # Feltételezzük, hogy ez a CalculateEffectiveMeshSize barátságos neve
            "Euclidean Distance": "km",  # Feltételezzük, hogy ez a CalculateEuclidean barátságos neve
            "Fractal Dimension Index": "Index (0-2)",
            "Greatest Patch Area": "km²",
            "Landscape Division": "Index (0-1)",
            "Landscape Proportion": "%",
            "Total Landscape Area": "km²",  # LandCover-re használt becslés
            "Mean Patch Area": "km²",
            "Median Patch Area": "km²",
            "Nearest Neighbour Distance": "km",
            "Number of Patches": "patches",
            "Patch Cohesion Index": "Index (0-100)",
            "Patch Density": "patches/km²",
            "Smallest Patch Area": "km²",
            "Splitting Index": "Index (Dim.less)",
            "CalculateEffectiveMeshSize": "km²",
            "CalculateEuclidean": "km",
            "LandCover": "km²",
        }

        output_path = self.dlg.saveFileDialog.filePath()

        selected_layers = ComboBoxHandler.getCheckedItems(self.dlg.layerSelector)
        if not selected_layers:
            self.iface.messageBar().pushMessage(
                "Error",
                "No layer selected!",
                level=Qgis.Warning,
                duration=3
            )
            return

        selected_metrics = ComboBoxHandler.getCheckedItems(self.dlg.metricSelector)
        if not selected_metrics:
            self.iface.messageBar().pushMessage(
                "Error",
                "No metric selected!",
                level=Qgis.Warning,
                duration=3
            )
            return

        data_to_write = []
        headers = ["Layer Name", "Metric Name", "Statistic Detail", "Value", "Unit"]

        for layer in selected_layers:
            layer_name = layer.name()
            land_cover_mapping = self.get_land_cover_mapping_from_layer(layer)

            for metric_func, metric_name in selected_metrics:
                default_unit = UNIT_MAPPING.get(metric_name, "N/A")

                try:
                    value = metric_func(layer)

                    if isinstance(value, dict):
                        if metric_name == "Patch Density":
                            patch_density_total = value.get("patch_density", None)
                            if patch_density_total is not None:
                                data_to_write.append([
                                    layer_name,
                                    metric_name,
                                    "TOTAL Patch Density",
                                    patch_density_total,
                                    UNIT_MAPPING.get("Patch Density", "patches/km²")
                                ])

                            patch_stats = value.get("patch_stats", {})
                            for cls, stats in patch_stats.items():
                                class_name = land_cover_mapping.get(cls, f"Class {cls}")

                                num_patches = stats.get("num_patches", 0)
                                data_to_write.append([
                                    layer_name,
                                    metric_name,
                                    f"{class_name} Patch Count",
                                    num_patches,
                                    "patches"
                                ])

                                if "smallest_patch_area" in stats:
                                    smallest_area = stats["smallest_patch_area"]
                                    data_to_write.append([
                                        layer_name,
                                        metric_name,
                                        f"{class_name} Smallest Area",
                                        smallest_area,
                                        UNIT_MAPPING.get("Smallest Patch Area", "km²")
                                    ])

                        elif metric_name == "Smallest Patch Area":
                            data_to_write.append([
                                layer_name,
                                metric_name,
                                "Raw Dict Output",
                                str(value),
                                default_unit
                            ])

                        else:
                            data_to_write.append([
                                layer_name,
                                metric_name,
                                "Raw Dict Output",
                                str(value),
                                "N/A"
                            ])

                    elif isinstance(value, (int, float)):
                        unit = "patches" if metric_name in ["NumberOfPatches", "Number of Patches"] else default_unit

                        data_to_write.append([
                            layer_name,
                            metric_name,
                            "TOTAL Value",
                            value,
                            unit
                        ])

                    else:
                        data_to_write.append([
                            layer_name,
                            metric_name,
                            "Raw Output",
                            str(value),
                            "N/A"
                        ])

                    msg_parts = [f"{detail}: {value} {unit}" for _, _, detail, value, unit in data_to_write if
                                 _ == layer_name and __ == metric_name]
                    if msg_parts:
                        self.iface.messageBar().pushMessage(
                            "Info",
                            f"{layer_name} - {metric_name} calculated. Results: {'; '.join(msg_parts[:1])}...",
                            level=0,
                            duration=3
                        )

                except Exception as e:
                    data_to_write.append([
                        layer_name,
                        metric_name,
                        "ERROR",
                        f"Calculation Failed: {str(e)}",
                        "N/A"
                    ])
                    self.iface.messageBar().pushMessage(
                        "Error",
                        f"Calculation failed for {layer_name} - {metric_name}: {str(e)}",
                        level=Qgis.Critical,
                        duration=5
                    )

        try:
            workbook = xlsxwriter.Workbook(output_path)
            worksheet = workbook.add_worksheet("Metric Results")

            header_format = workbook.add_format(
                {"bold": True, "border": 1, "bg_color": "#AEC6E3", "align": "center", "valign": "vcenter"})
            numeric_format = workbook.add_format({"num_format": "0.00", "align": "left"})
            general_format = workbook.add_format({"align": "left"})

            worksheet.set_column("A:A", 25)
            worksheet.set_column("B:B", 25)
            worksheet.set_column("C:C", 35)
            worksheet.set_column("D:D", 15, numeric_format)
            worksheet.set_column("E:E", 15)

            worksheet.write_row("A1", headers, header_format)

            row_num = 1
            for row_data in data_to_write:
                layer_name, metric_name, detail, value, unit = row_data

                worksheet.write(row_num, 0, layer_name)
                worksheet.write(row_num, 1, metric_name)
                worksheet.write(row_num, 2, detail)
                worksheet.write(row_num, 4, unit)

                if isinstance(value, (int, float)):
                    worksheet.write(row_num, 3, value, numeric_format)
                else:
                    worksheet.write(row_num, 3, str(value), general_format)

                row_num += 1

            workbook.close()

            self.iface.messageBar().pushMessage(
                "Success",
                f"Metrics successfully written to Excel file: {output_path}",
                level=Qgis.Success,
                duration=5
            )

        except xlsxwriter.exceptions.FileCreateError:
            self.iface.messageBar().pushMessage(
                "Error",
                f"Cannot create Excel file. Please close the file if it is open: {output_path}",
                level=Qgis.Critical,
                duration=10
            )
        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error",
                f"An unexpected error occurred while writing to Excel: {str(e)}",
                level=Qgis.Critical,
                duration=10
            )
